# Define a custom network for container communication
networks:
  data-analysis-network:
    driver: bridge

services:
  # SQL Server container for data storage
  sqlserver:
    container_name: sqlserver_data_analysis
    image: mcr.microsoft.com/mssql/server:2022-latest
    platform: linux/amd64
    restart: unless-stopped
    environment:
      # Required SQL Server environment variables
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "YourStrong!Passw0rd"
      MSSQL_PID: "Developer"  # Use Developer edition (free)
      MSSQL_TCP_PORT: 1433
    ports:
      - "1433:1433"  # Expose SQL Server port to host
    # Note: Removed persistent volumes to avoid permission issues in development
    # Data will be recreated on container restart, which is fine for development
    networks:
      - data-analysis-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1' -C || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Python container for data analysis and development
  python-app:
    container_name: python_data_analysis
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Database connection environment variables
      DB_SERVER: "sqlserver"
      DB_PORT: "1433"
      DB_USER: "sa"
      DB_PASSWORD: "YourStrong!Passw0rd"
      DB_NAME: "ShopDB"
      # Python environment variables
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      # Development mode
      DEVELOPMENT_MODE: "true"
    volumes:
      # Mount local code directory for live editing
      - ./app:/app
      # Optional: Mount additional directories for data files, notebooks, etc.
      - ./data:/app/data
      - ./notebooks:/app/notebooks
      - ./scripts:/app/scripts
    working_dir: /app
    # Keep container running for interactive development
    stdin_open: true
    tty: true
    networks:
      - data-analysis-network
    depends_on:
      sqlserver:
        condition: service_healthy
    # Override default command to keep container running
    command: >
      bash -c "
        echo 'Starting Python development environment...' &&
        echo 'SQL Server connection details:' &&
        echo '  Host: sqlserver' &&
        echo '  Port: 1433' &&
        echo '  User: sa' &&
        echo '  Database: ShopDB' &&
        echo '' &&
        echo 'Available commands:' &&
        echo '  python test.py          - Run the test script' &&
        echo '  python -c \"import pymssql; print(\\\"pymssql available\\\")\"' &&
        echo '  jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root' &&
        echo '' &&
        echo 'Container is ready for development!' &&
        tail -f /dev/null
      "

  # Optional: Jupyter Notebook service for interactive data analysis
  jupyter:
    container_name: jupyter_data_analysis
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DB_SERVER: "sqlserver"
      DB_PORT: "1433"
      DB_USER: "sa"
      DB_PASSWORD: "YourStrong!Passw0rd"
      DB_NAME: "ShopDB"
      JUPYTER_ENABLE_LAB: "yes"
    ports:
      - "8888:8888"  # Jupyter port
    volumes:
      - ./app:/app
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    working_dir: /app
    networks:
      - data-analysis-network
    depends_on:
      sqlserver:
        condition: service_healthy
    command: >
      bash -c "
        pip install jupyter jupyterlab ipykernel &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
      "
